import{_ as n,W as s,X as c,Y as o,Z as e,a1 as a,$ as t}from"./framework-f5e21fe7.js";const l={},d=e("p",null,[a("本文旨在真正吃透 "),e("code",null,"React"),a(" 知识链路与底层逻辑")],-1),p=t(`<h1 id="_1-深入浅出-react" tabindex="-1"><a class="header-anchor" href="#_1-深入浅出-react" aria-hidden="true">#</a> 1. 深入浅出 React</h1><h2 id="_1-1-jsx-底层原理" tabindex="-1"><a class="header-anchor" href="#_1-1-jsx-底层原理" aria-hidden="true">#</a> 1.1 JSX 底层原理</h2><blockquote><p>关于 <code>JSX</code> 的 3 个大问题</p></blockquote><ul><li><ol><li><code>JSX</code> 的本质是什么，它和 <code>JS</code> 之间到底是什么关系？</li></ol></li><li><ol start="2"><li>为什么使用 <code>JSX</code>？ 不用会有什么后果？</li></ol></li><li><ol start="3"><li><code>JSX</code> 背后的功能模块是什么？ 这个功能模块都做哪些事情？</li></ol></li></ul><hr><blockquote><p><code>JSX</code> 本质</p></blockquote><ul><li><code>JSX</code> 是 <code>JS</code> 的一种语法<mark>扩展</mark>，它和模板语言很接近，但是它充分具备 <code>JS</code> 的能力</li></ul><blockquote><p><code>JSX</code> 语法是如何在 <code>JS</code> 中生效的？</p></blockquote><ul><li><code>JSX</code> 会被编译成 <code>React.createElement()</code>，<code>React.createElement()</code> 会返回一个叫做 <code>React Element</code> 的 <code>JS</code> 对象，其中编译的动作是由 <code>Babel</code> 完成的。</li></ul><img src="https://raw.githubusercontent.com/tcSteamedEggs/my-blog-pic/main/Babel.png"><blockquote><p>什么是 <code>Babel</code> ?</p></blockquote><ul><li><p>主要用于将高版本的 <code>JS</code> 代码转为向后兼容的 <code>JS</code>代码，从而能让我们的代码运行在更低版本的浏览器或者其他的环境中。</p></li><li><p>比如我们在代码中使用了 <code>ES6</code> 箭头函数：</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Babel 编译前的代码</span>
<span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但如果用低版本浏览器运行的话会出现报错；但是经过 <code>Babel</code> 编译之后的代码就可以运行在低版本的浏览器中了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Babel 编译后的代码</span>
<span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>React</code> 选用 <code>JSX</code> 语法的动机</p></blockquote><ul><li><code>JSX</code> 语法糖允许前端开发者使用最为熟悉的类 <code>HTML</code> 标签语法来创建虚拟 <code>DOM</code>，在降低学习成本的同时，也提升了研发效率与研发体验</li></ul><div style="text-align:center;"><p>TO BE CONTINUE...</p></div>`,18);function i(r,u){return s(),c("div",null,[d,o(" more "),p])}const m=n(l,[["render",i],["__file","02-react.html.vue"]]);export{m as default};
