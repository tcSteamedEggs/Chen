import{_ as a,W as t,X as e,Y as p,Z as n,a1 as s,$ as c}from"./framework-f5e21fe7.js";const i={},o=n("p",null,[s("在 "),n("code",null,"JavaScript"),s("中，发布订阅模式（也称为观察者模式）是一种常用的设计模式，可以让不同对象之间以一种松耦合的方式进行通信。这种模式在实际项目中具有广泛的应用，可以提高代码的可维护性和灵活性。本文将通过通俗易懂的语言，深入探讨 "),n("code",null,"JavaScript"),s(" 中的发布订阅模式，介绍其基本概念和用法，并通过具体的代码示例来演示如何在实际项目中应用这种设计模式。")],-1),l=n("blockquote",null,[n("p",null,[s("概要是用 "),n("code",null,"chatgpt"),s(" 生成的 ~ 觉得如何呢 ~")])],-1),u=c(`<h1 id="_1-什么是发布订阅模式" tabindex="-1"><a class="header-anchor" href="#_1-什么是发布订阅模式" aria-hidden="true">#</a> 1. 什么是发布订阅模式 ？</h1><ul><li><p><strong>发布订阅模式</strong>是一种对象间<mark>一对多</mark>的依赖关系（<mark>利用消息队列</mark>），可以让对象之间轻松通信。</p><ul><li>一对多意味着 <code>n</code> 个订阅者对应 <code>1</code> 个消息队列</li></ul></li></ul><blockquote><p>羞涩难懂 ~ 简单来说就是一种便于对象间（发布者与订阅者）通信的手段或方式 ~</p></blockquote><h2 id="_1-1-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-1-基本概念" aria-hidden="true">#</a> 1.1 基本概念</h2><blockquote><p>让我们一起想象一下 ~</p></blockquote><ul><li><p>有一个发布者（<code>publisher</code>），他的职责是<u>维护（添加、删除）一个订阅者列表</u>，并在特定事件发生时<mark>通知</mark>所有已注册的订阅者。</p></li><li><p>有多个订阅者（<code>subsrciber</code>），他们的职责是<mark>注册</mark>（或制定）特定事件发生时执行特定的操作（回调函数）。</p></li><li><p>有一个触发器，叫做事件（或消息），它作为发布者和订阅者之间的联结，<u>发布者负责触发事件</u>，并通知所有的订阅者指定事件发生，从而让订阅者执行特定操作。</p></li></ul><p><img style="width:50%;height:50%;display:block;margin:0 auto;" src="https://raw.githubusercontent.com/tcSteamedEggs/my-blog-pic/main/发布订阅者图1.png"></p><blockquote><p>怎么多出一个消息队列 ~</p></blockquote><ul><li><p>可以这么说，消息队列就是个中介 ~</p></li><li><p>订阅者既然要订阅事件，那么需要把自己想订阅的事件<mark>注册</mark>到消息队列中</p></li><li><p>作为发布者，发布该事件到消息队列中，也就是该事件触发时，由消息队列统一调度（执行）订阅者注册到消息队列的代码。</p></li></ul><h2 id="_1-2-基本用途" tabindex="-1"><a class="header-anchor" href="#_1-2-基本用途" aria-hidden="true">#</a> 1.2 基本用途</h2><ul><li>发布订阅模式广泛地应用于 <code>JavaScript</code> 客户端编程中，所有的浏览器事件（<code>mouseover</code>，<code>keypress</code> 等）都是使用该模式的例子。</li></ul><h2 id="_1-3-优点" tabindex="-1"><a class="header-anchor" href="#_1-3-优点" aria-hidden="true">#</a> 1.3 优点</h2><ul><li><p><strong>松耦合</strong></p><ul><li>对象之间解耦，它们不需要直接相互引用或依赖，从而使得系统更加灵活、可维护和可扩展。</li></ul></li><li><p><strong>可复用性</strong></p><ul><li>发布订阅模式可以在多个地方使用，让不同的订阅者可以订阅同一个事件，从而实现功能的复用。</li></ul></li><li><p><strong>可扩展性</strong></p><ul><li>发布者和订阅者可以动态地增加或删除，不影响彼此的功能，从而方便地扩展系统。</li></ul></li><li><p><strong>解耦逻辑</strong></p><ul><li>通过将订阅者的逻辑封装在回调函数中，可以将不同的业务逻辑分离开来，使得代码更加清晰、可维护。</li></ul></li><li><p><strong>异步处理</strong></p><ul><li>发布订阅模式可以方便地处理异步事件，例如在异步请求完成后通知订阅者更新 <code>UI</code>。</li></ul></li></ul><hr><h1 id="_2-发布订阅模式的特征" tabindex="-1"><a class="header-anchor" href="#_2-发布订阅模式的特征" aria-hidden="true">#</a> 2. 发布订阅模式的特征</h1><ul><li><p><strong>我们先定义声明消息队列 <code>message</code>，有需要的对象（或订阅者） <code>obj</code> 去订阅</strong></p><ul><li><p>那么，消息队列在 <code>JavaScript</code> 中可以用数组模拟 <code>[fn1,fn2,fn3]</code></p></li><li><p>需要注意的是：<u>对象不是主动触发，而是被动触发！</u> 这也决定了该设计模式的优势之处 ！</p></li></ul></li></ul><blockquote><p>举个栗子来理解吧 ~</p></blockquote><ul><li><p>小张去书店买书，去书店问：“没有”，回家。过一会再去问，没有，回家。过一会又再去问：没有，回家。</p></li><li><p>相当于在实际开发场景中，频繁的调用方法（<mark>轮询</mark>）。</p><ul><li>例：使用 <code>websocket</code> 长连接，<code>setInterval</code>...</li><li>缺点：网络负担大，服务器开销大。</li></ul></li></ul><hr><ul><li><p>小张去书店买书，问：没有，<mark>先订阅（on）</mark>，就是给书店店员联系方式，一旦有了书，店员就是<mark>发送</mark>一条消息，然后手机响了<mark>触发消息队列</mark>叫小张去买书，书买着了，联系方式<mark>不需要</mark>了。</p></li><li><p>相当于在实际开发场景中，使用发布订阅模式。</p><ul><li><code>addEventListener()</code> 本质上就是一个发布订阅模式的应用，比如绑定点击事件，<u>不是主动触发方法，而是状态发生变化（点击）被动触发回调函数。</u></li></ul></li></ul><hr><h1 id="_3-实现一个简单的发布订阅模式" tabindex="-1"><a class="header-anchor" href="#_3-实现一个简单的发布订阅模式" aria-hidden="true">#</a> 3. 实现一个简单的发布订阅模式</h1><ul><li><p><strong>整体实现思路</strong></p><ul><li><p>创建一个类 <code>class --&gt; Observer</code></p></li><li><p>在这个类里创建一个消息队列 <code>message</code></p></li><li><p><code>on</code> 方法 - 用于将回调函数 <code>fn</code> 添加到消息队列(订阅者注册事件到这里)</p></li><li><p><code>emit</code> 方法 - 取到 <code>event</code> 事件类型，根据 <code>event</code> 值去执行对应消息列表中的函数(发布者发布事件到消息队列，消息队列处理代码)</p></li><li><p><code>off</code> 方法 - 可以根据 <code>event</code> 事件类型取消订阅(取消订阅)</p></li></ul></li></ul><h2 id="_3-1-搭建基本结构" tabindex="-1"><a class="header-anchor" href="#_3-1-搭建基本结构" aria-hidden="true">#</a> 3.1 搭建基本结构</h2><blockquote><p>简化版</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 
	分析构造函数
	属性：消息队列
	{
		&quot;click&quot;: [fn1, fn2, fn3],
		&quot;xxx&quot;: [handlerA, handlerB],
		//...
	}
	能向消息队列里面添加内容 $on
	删除消息队列中的内容 $off
	触发消息队列中内容 $emit  
*/</span>
<span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
	<span class="token function">$on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
	<span class="token function">$off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
	<span class="token function">$emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-2-初始化消息队列" tabindex="-1"><a class="header-anchor" href="#_3-2-初始化消息队列" aria-hidden="true">#</a> 3.2 初始化消息队列</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token comment">// &quot;红宝书&quot;: [handlerA, handlerB]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
	<span class="token function">$on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
	<span class="token function">$off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
	<span class="token function">$emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-on-方法编写" tabindex="-1"><a class="header-anchor" href="#_3-3-on-方法编写" aria-hidden="true">#</a> 3.3 $on 方法编写</h2><ul><li>用于将回调函数 <code>fn</code> 添加到消息队列 <code>this.message</code></li></ul><blockquote><p>实际上是<mark>为 <code>type</code> 绑定相关事件</mark>。类似于：<code>btn.addEventListener(&quot;click&quot;,fn)</code></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//todo...</span>
<span class="token function">$on</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span>fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 先判断消息队列中是否有 type 属性</span>
   <span class="token comment">// 有 --&gt; 直接添加到消息队列 （使用 push...）</span>
   <span class="token comment">// 没有 --&gt; 为 type 属性初始化一个空数组</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>messagep<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//todo...</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>检验一下！</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用构造函数创建一个实例</span>
<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p1<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&quot;红宝书&quot;</span><span class="token punctuation">,</span> handlerA<span class="token punctuation">)</span><span class="token punctuation">;</span>
p1<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&quot;红宝书&quot;</span><span class="token punctuation">,</span> handlerB<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">handlerA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;handlerA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">handlerB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;handlerB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>没问题！</p></blockquote><img src="https://raw.githubusercontent.com/tcSteamedEggs/my-blog-pic/main/检验1.png"><h2 id="_3-4-off-方法编写" tabindex="-1"><a class="header-anchor" href="#_3-4-off-方法编写" aria-hidden="true">#</a> 3.4 $off 方法编写</h2><ul><li>根据 <code>event</code> 事件类型取消订阅(取消订阅)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// todo...</span>
<span class="token function">$off</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 首先判断是否订阅，没有订阅直接返回或报错异常</span>
    <span class="token comment">// 再判断是否 fn 为 空（undefined）</span>
    <span class="token comment">// 是 --&gt; 删除 type 全部事件 </span>
    <span class="token comment">// 不是就仅删除这个函数方法</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">// return new Error(&#39;没有订阅 type...&#39;);</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// delete this.message[type]</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 删除 --&gt; 过滤掉这个方法或其他方法...</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item <span class="token operator">!==</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// todo...</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>验证（略）</p></blockquote><h2 id="_3-5-emit-方法编写" tabindex="-1"><a class="header-anchor" href="#_3-5-emit-方法编写" aria-hidden="true">#</a> 3.5 $emit 方法编写</h2><ul><li>获取到 <code>event</code> 事件类型，根据 <code>event</code> 值去<mark>执行</mark>对应缓存列表中的函数(发布者发布事件到调度中心，调度中心处理代码)</li></ul><blockquote><p>实际上就是去执行回调函数！</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//遍历并执行</span>
        <span class="token function">item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>检验一下！</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p1<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&quot;红宝书&quot;</span><span class="token punctuation">,</span> handlerA<span class="token punctuation">)</span><span class="token punctuation">;</span>
p1<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&quot;红宝书&quot;</span><span class="token punctuation">,</span> handlerB<span class="token punctuation">)</span><span class="token punctuation">;</span>
p1<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&quot;红宝书&quot;</span><span class="token punctuation">,</span> handlerC<span class="token punctuation">)</span><span class="token punctuation">;</span>
p1<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;红宝书&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://raw.githubusercontent.com/tcSteamedEggs/my-blog-pic/main/检验2.png"><blockquote><p>是不是很简单！实践一下吧！</p></blockquote><hr><h1 id="_4-实际场景运用" tabindex="-1"><a class="header-anchor" href="#_4-实际场景运用" aria-hidden="true">#</a> 4. 实际场景运用</h1><h2 id="_4-1-杂志订阅" tabindex="-1"><a class="header-anchor" href="#_4-1-杂志订阅" aria-hidden="true">#</a> 4.1 杂志订阅</h2><ul><li><p>假设有一个发布者 <code>paper</code>，它发行一个日报和月刊。无论是日报还是日刊，有一个名为 <code>jack</code> 的订阅者都会收到通知。</p></li><li><p><code>paper</code> 对象有一个 <code>subscribers</code> 属性，是一个数组，<u>用于保存所有的订阅者</u>。订阅的过程就是仅将订阅者放入数组。</p></li><li><p>当一个事件发生时，<code>paper</code> 遍历这个订阅者列表，然后<u>通知</u>它们。通知其实就是调用订阅者对象的一个方法。因此，在订阅的过程中，订阅者需要提供一个方法给 <code>paper</code> 对象的<code>subsrcibe</code>。</p></li><li><p>因为这些成员方法对任何对象都是通用的，因此可以作为一个单独的、公共的对象如 <code>publisher</code> 提取出来，可以通过<mark>混元模式</mark>将它们复制到任何对象当中，比如 <code>paper</code> 对象。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 做法很多 类 构造函数 对象（我们使用）</span>
<span class="token comment">// 发布者是一个对象 我们写一个具有通用功能的发布者</span>
<span class="token keyword">var</span> publisher <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 用于保存所有的订阅者</span>
    <span class="token literal-property property">subscribers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    	<span class="token literal-property property">any</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token comment">// 默认事件类型 any</span>
    	  <span class="token comment">// &quot;红宝书&quot;: [handlerA, handlerB]</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token comment">// 类似于 Observer 中的 $on </span>
	<span class="token function-variable function">subscribe</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        type <span class="token operator">=</span> type <span class="token operator">||</span> <span class="token string">&quot;any&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>paper</code> 对象也可以提供 <code>unsubscribe()</code> 方法，它用于将订阅者从数组者移除。还有一个方法 <code>publish()</code>，用于调用订阅者的方法。</li><li>定义辅助方法 <code>visitSubscribers</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token comment">// todo...</span>
    <span class="token comment">// 辅助方法 visitSubscribers 辅助 publish 和 unsubscribe 也可以不使用辅助方法 类似于 3.</span>
    <span class="token function-variable function">visitSubscribers</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        type <span class="token operator">=</span> type <span class="token operator">||</span> <span class="token string">&quot;any&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// action 行为 publish/unsubscribe</span>
        <span class="token comment">// arg 参数  publication/fn</span>
        <span class="token comment">// type “要绑定的事件”</span>
        <span class="token keyword">var</span> subscribers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// subscribers 订阅 type 的订阅者数组</span>
        <span class="token keyword">var</span> max <span class="token operator">=</span> subscribers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>action <span class="token operator">===</span> <span class="token string">&#39;publish&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 依次调用订阅者的方法</span>
                <span class="token comment">// arg 为 publication</span>
                subscribers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// action 为 unsubscribe</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>subscribers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// arg 为 fn </span>
                    <span class="token comment">//找到这个要剔除的方法</span>
                    subscribers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// todo...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>publish</code> 和 <code>unsubscribe</code> 方法编写，借助辅助方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token comment">// todo...</span>
    <span class="token function-variable function">publish</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">publication<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用辅助方法</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">visitSubscribers</span><span class="token punctuation">(</span><span class="token string">&quot;publish&quot;</span><span class="token punctuation">,</span>publication<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
   	<span class="token function-variable function">unsubscribe</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span>fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">visitSubscribers</span><span class="token punctuation">(</span><span class="token string">&quot;unsubscribe&quot;</span><span class="token punctuation">,</span>fn<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// todo...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><mark>使用混元模式</mark>（简单理解就是将任意多数量的对象中复制属性。然后将它们混在一起组成一个新对象），通过复制通过发布者的方法将如 <code>paper</code> 对象转变为发布者。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makePublisher</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> publisher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//原型属性不需要 只需要方法</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>publisher<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> publisher<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> publisher<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 注意要添加 subscribers 属性，没有会报错</span>
    obj<span class="token punctuation">.</span>subscribers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">any</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实现 <code>paper</code> 对象，发布日报和月刊，并变成发布者</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> paper <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">daily</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">&quot;日报来咯&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">monthly</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">&quot;月刊来咯&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;monthly&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">makePublisher</span><span class="token punctuation">(</span>paper<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>声明订阅者 <code>jack</code> ，用于订阅 <code>paper</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> jack <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 有两个方法</span>
    <span class="token function-variable function">drinkCoffee</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">paper</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;喝着咖啡，&#39;</span> <span class="token operator">+</span> paper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">sundayPreNap</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">monthly</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;睡觉前，&#39;</span> <span class="token operator">+</span> monthly<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// jack 订阅 paper</span>
paper<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&#39;monthly&#39;</span><span class="token punctuation">,</span> jack<span class="token punctuation">.</span>sundayPreNap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*  相当于
	this.subscribers = {
		&quot;monthly&quot;: [ sundayPreNap ]
	}	
*/</span>
paper<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> jack<span class="token punctuation">.</span>drinkCoffee<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">/*  相当于
	this.subscribers = {
		&quot;any&quot;: [ drinkCoffee ],
		&quot;monthly&quot;: [ sundayPreNap ],
	}	
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>触发事件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>paper<span class="token punctuation">.</span><span class="token function">monthly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// monthly 事件发生时触发</span>
<span class="token comment">// 会调用 publish 方法 --&gt; 相当于执行 sundayPreNap</span>
<span class="token comment">// &quot;睡觉前，月刊来咯&quot;</span>
paper<span class="token punctuation">.</span><span class="token function">daily</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// any 事件发生时触发 （默认事件）</span>
<span class="token comment">// 会调用 publish 方法 --&gt; 相当于执行 drinkCoffee</span>
<span class="token comment">// &quot;喝着咖啡，日刊来咯&quot;</span>
<span class="token comment">// 这里的 publish 方法我们不是直接调用的，而是间接调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>检验一下</p></blockquote><img src="https://raw.githubusercontent.com/tcSteamedEggs/my-blog-pic/main/检验3.png"><ul><li>此时涉及到的对象都是松耦合的，而且不在修改代码的前提下，我们可以给 <code>paper</code> 添加更多的订阅者，同时 <code>jack</code> 可以在任何时候取消订阅！</li></ul><img src="https://raw.githubusercontent.com/tcSteamedEggs/my-blog-pic/main/检验4.png"><ul><li>取消订阅</li></ul><img src="https://raw.githubusercontent.com/tcSteamedEggs/my-blog-pic/main/检验5.png"><ul><li>现在我们把 <code>jack</code> 也变成一个发布者，在博客和微博等平台上，人人都可以是发布者！</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">makePublisher</span><span class="token punctuation">(</span>jack<span class="token punctuation">)</span><span class="token punctuation">;</span>
jack<span class="token punctuation">.</span><span class="token function-variable function">blog</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>现在 <code>jack</code>可以在博客上发布文章了，让 <code>paper</code> 订阅一下 <code>jack</code> 的博客以便审核内容，提供一个方法 <code>readBlog()</code>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>paper<span class="token punctuation">.</span><span class="token function-variable function">readBlog</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">blog</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;审核博客内容为：&quot;</span> <span class="token operator">+</span> blog<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//订阅 默认事件 any</span>
jack<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> paper<span class="token punctuation">.</span>readBlog<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//发布博客文章</span>
jack<span class="token punctuation">.</span><span class="token function">blog</span><span class="token punctuation">(</span><span class="token string">&quot;发布订阅模式&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://raw.githubusercontent.com/tcSteamedEggs/my-blog-pic/main/检验6.png"><blockquote><p>太棒了！居然看完了！</p></blockquote><div class="hint-container info"><p class="hint-container-title">小结</p><p>发布订阅模式是一个用于对象间通信的设计模式，通信方式更加灵活、可维护和可扩展，像在 <code>Vue</code> 、 <code>React</code> 等前端框架中，组件之间的通信，其中就有使用到发布订阅模式，具体可以看看 <code>pubsub-js</code>，一个深受欢迎且较为成熟的库 ~</p></div><div style="text-align:center;"><p>希望本文对你有所帮助 !</p></div>`,79);function d(r,k){return t(),e("div",null,[o,l,p(" more "),u])}const m=a(i,[["render",d],["__file","publish-subscribe.html.vue"]]);export{m as default};
